<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.HttpRequest</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Performs a single synchronous http request.&#13;
The vInput parameter can either contain the target url as a string or a parameter object.&#13;
Values in the parameter object are:&#13;
- url: the url to be requested&#13;
- method: the http verb to be used (e.g. "get", "post", etc.)&#13;
- requestbody: the string to be sent as the request body. If provided the method is set to "post" no matter what is specified in the method parameter.&#13;
- basicauth: An object containing values "username" and "password"&#13;
- oauth2: An object containing the value "credential_sys_id" which refers to an OAuth2 credential record&#13;
- response: A string to specify how the result should be returned by HttpRequest. If set to "RESTResponseV2" an object is returned if the request did not run into an exception, otherwise the function returns the response body.&#13;
- headers: An array of objects representing a header. A header object should contain values "name" and "value".&#13;
- mid_server: the name of a MID server to be used to relay the request.</description>
        <name>HttpRequest</name>
        <script><![CDATA[function HttpRequest(vInput)
{
	var params = {};
	var strUrl = '';
	if (!IsObject(vInput))
	{
		strUrl = GetStringValue(vInput);
	}
	else
	{
		params = vInput;
		strUrl = GetStringValue(GetValue(vInput,'url'));
		if (strUrl == '')
		{
			LogError('HttpRequest: No url specified!');
			return false;
		}
	}

	if (IsValidUrl(strUrl) == false)
	{
		LogError('HttpRequest: Url invalid: '+strUrl);
		return false;
	}

	var http = new sn_ws.RESTMessageV2();

	var strMethod = GetStringValue(GetValue(params,'method'));
	if (strMethod == '')
	{
		strMethod = 'get';
	}
	http.setHttpMethod(strMethod);

	var strRequestBody = GetStringValue(GetValue(params,'requestbody'));
	if (strRequestBody != '')
	{
		if (strMethod == 'get')
		{
			http.setHttpMethod('post');
		}
		http.setRequestBody(strRequestBody);
	}

	var aHeaders = GetArrayValue(GetValue(params,'headers'));
	for (var nHeader = 0; nHeader < aHeaders.length; nHeader++)
	{
		var header = aHeaders[nHeader];
		var strName = GetValue(header,'name');
		var strValue = GetValue(header,'value');
		http.setRequestHeader(strName, strValue);
	}
	
	var oBasicAuth = GetValue(params,'basicauth');
	if (IsObject(oBasicAuth) == true)
	{
		var strUserName = GetStringValue(GetValue(oBasicAuth,'username'));
		var strPassword = GetStringValue(GetValue(oBasicAuth,'password'));
		if (strUserName != '')
		{
			http.setBasicAuth(strUserName,strPassword);
		}
	}
	var oOAuth2 = GetValue(params,'oauth2');
	if (IsObject(oOAuth2) == true)
	{
		var strCredentialSysId = GetStringValue(GetValue(oOAuth2,'credential_sys_id'));
		var grCredential = GetRecord('oauth_2_0_credentials',strCredentialSysId);
		if (IsValidRecord(grCredential) == false)
		{
			LogError('HttpRequest: Could find OAuth2 credential record: "'+strCredentialSysId+'"');
			return false;			
		}
		var strProfileSysId = GetStringValue(grCredential.oauth_entity_profile);
		
		var grProfile = GetRecord('oauth_entity_profile',strProfileSysId);
		if (IsValidRecord(grProfile) == false)
		{
			LogError('HttpRequest: Could find OAuth2 profile record: "'+strProfileSysId+'"');
			return false;			
		}
		try
		{
			http.setRequestorProfile('oauth_2_0_credentials',strCredentialSysId); 
			http.setAuthenticationProfile('oauth2', strProfileSysId);
		}
		catch (e)
		{
			LogError('HttpRequest: Failed to initialize OAuth2 authentication: '+e);
			return false;			
		}

	}



	var strMidServer = GetStringValue(GetValue(params,'mid_server'));
	if (strMidServer != '')
	{
		var grAgent = new GlideRecord('ecc_agent');
		grAgent.addQuery('name','=',strMidServer);
		grAgent.query();
		if (grAgent.getRowCount() > 1)
		{
			LogError('HttpRequest: Found more than one MID server with name: "'+strMidServer+'"');
			return false;
		}
		if (grAgent.next() == false)
		{
			LogError('HttpRequest: Could find MID server named: "'+strMidServer+'"');
			return false;
		}
		if (grAgent.status != 'Up')
		{
			LogError('HttpRequest: MID server "'+strMidServer+'" is not in status "Up"!');
			return false;
		}
		http.setMIDServer(strMidServer);	
	}
	http.setEndpoint(strUrl);
	try 
	{
		var response = http.execute();	
	}
	catch (e)
	{
		LogError('HttpRequest: http.execute threw an exception: ' + RenderValue(e));
		return false;
	}

	var strResponse = GetStringValue(GetValue(vInput,'response'));
	if (strResponse == 'RESTResponseV2')
	{
		return response;
	}

	var body = response.getBody();
	return body;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-02-27 09:10:34</sys_created_on>
        <sys_id>be520f981bd38450a89720a8ec4bcbab</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>HttpRequest</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_be520f981bd38450a89720a8ec4bcbab</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-02-20 14:17:06</sys_updated_on>
    </sys_script_include>
</record_update>
